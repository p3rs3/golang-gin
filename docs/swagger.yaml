basePath: /docs
definitions:
  dto.CreateUserDto:
    properties:
      age:
        maximum: 99
        minimum: 1
        type: integer
      name:
        maxLength: 30
        minLength: 1
        type: string
      secondname:
        maxLength: 30
        minLength: 1
        type: string
    required:
    - age
    - name
    - secondname
    type: object
  dto.UpdateUserDto:
    properties:
      age:
        maximum: 99
        minimum: 1
        type: integer
      name:
        maxLength: 30
        minLength: 1
        type: string
      secondname:
        maxLength: 30
        minLength: 1
        type: string
    type: object
  model.User:
    properties:
      age:
        type: integer
      id:
        type: integer
      name:
        type: string
      secondname:
        type: string
    required:
    - age
    - id
    - name
    - secondname
    type: object
host: localhost:8080
info:
  contact: {}
  description: A Users service API in Go using Gin framework
  title: Users Service API
  version: "1.0"
paths:
  /users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      summary: Get users
      tags:
      - users
    post:
      parameters:
      - description: create user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
      summary: Create user
      tags:
      - users
  /users/{user_id}:
    delete:
      parameters:
      - description: user id
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
      summary: Delete user by id
      tags:
      - users
    get:
      parameters:
      - description: user id
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      summary: Get user by id
      tags:
      - users
    patch:
      parameters:
      - description: user id
        in: path
        name: user_id
        required: true
        type: string
      - description: update user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      summary: User user by id
      tags:
      - users
swagger: "2.0"
